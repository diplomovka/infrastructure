# created based on: https://github.com/confluentinc/cp-all-in-one/blob/7.2.1-post/cp-all-in-one/docker-compose.yml
# healthcheck and depends on created based on https://github.com/confluentinc/cp-demo/blob/7.2.1-post/docker-compose.yml

version: '3'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    container_name: zookeeper
    hostname: zookeeper
    ports:
      - 2181:2181
    healthcheck:
      test: echo srvr | nc zookeeper 2181 || exit 1
      retries: 20
      interval: 10s
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-server:7.2.1
    container_name: broker
    hostname: broker
    ports:
      # To learn about configuring Kafka for access across networks see
      # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/
      - 9092:9092
      - 9101:9101
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      # some envs taken from https://betterprogramming.pub/adding-schema-registry-to-kafka-in-your-local-docker-environment-49ada28c8a9b
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT #PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_HOST://localhost:9092,PLAINTEXT://broker:29092, # PLAINTEXT_INTERNAL://broker:29092 # PLAINTEXT://broker:9092 PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema_registry:8085
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      # CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'

  # schema_registry created based on: https://github.com/confluentinc/cp-demo/blob/7.2.1-post/docker-compose.yml
  schema_registry:
    image: confluentinc/cp-schema-registry:7.2.1
    container_name: schema_registry
    hostname: schema_registry
    # restart: always
    ports:
      - '8085:8085'
    depends_on:
      - zookeeper
      - broker
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema_registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      # SCHEMA_REGISTRY_KAFKASTORE_SECURITY_PROTOCOL: PLAINTEXT
      # SCHEMA_REGISTRY_DEBUG: 'true'
      # SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8085

  files_consumer:
    build:
      context: ../files_consumer/
    container_name: files_consumer
    hostname: files_consumer
    env_file:
      - files_consumer.env
    depends_on:
      - minio
      - redis_db
      - broker
      - zookeeper
      - schema_registry

  structured_data_consumer:
    build: 
      context: ../structured_data_consumer/
    container_name: structured_data_consumer
    hostname: structured_data_consumer
    env_file:
      - structured_data_consumer.env
    depends_on:
      - minio
      - redis_db
      - broker
      - zookeeper
      - schema_registry

  files_producer:
    build: 
      context: ../files_producer/
    container_name: files_producer
    hostname: files_producer
    ports:
      - '5001:5000'
    env_file:
      - files_producer.env
    depends_on:
      - broker
      - zookeeper
      - schema_registry

  structured_data_producer:
    build: 
      context: ../structured_data_producer/
    container_name: structured_data_producer
    hostname: structured_data_producer
    ports:
      - '5002:5000'
    env_file:
      - structured_data_producer.env
    depends_on:
      - broker
      - zookeeper
      - schema_registry

  redis_db:
    image: redis:alpine3.16
    container_name: redis_db
    hostname: redis_db
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    links: ['redis_commander']

  # redis_commander created based on:  https://stackoverflow.com/questions/52102475/docker-compose-redis-and-redis-commander
  redis_commander:
    image: rediscommander/redis-commander:latest
    container_name: redis_commander
    hostname: redis_commander
    ports:
      - '8081:8081'
    environment:
      REDIS_HOSTS: redis_db
    restart: always

  postgres_db:
    image: postgres:15rc1-alpine3.16
    container_name: postgres_db
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: password
      POSTGRES_DB: data
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # source: https://towardsdatascience.com/how-to-run-postgresql-and-pgadmin-using-docker-3a6a8ae918b5
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:2022-10-17-2
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: root@root.com
      PGADMIN_DEFAULT_PASSWORD: password
    ports:
      - '5050:80'

  minio:
    image: quay.io/minio/minio:RELEASE.2022-09-25T15-44-53Z.fips
    container_name: minio
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      MINIO_ROOT_USER: root
      MINIO_ROOT_PASSWORD: password
    volumes:
      - minio_data:/data
    command: server --console-address ":9001" /data # command source: http://www.sefidian.com/2022/04/08/deploy-standalone-minio-using-docker-compose/

volumes:
  redis_data:
  postgres_data:
  minio_data: